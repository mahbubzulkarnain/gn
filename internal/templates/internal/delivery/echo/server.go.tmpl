package delivery

import (
	"context"
	"errors"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/hiko1129/echo-pprof"
	"github.com/labstack/echo/v4"
	"gorm.io/gorm"
)

// HTTP ...
func HTTP(db *gorm.DB) {
    e := echo.New()

    if strings.ToLower(strings.TrimSpace(os.Getenv("DEBUG_PPROF"))) == "active" {
		// Automatically add routers for net/http/pprof
		// e.g. /debug/pprof, /debug/pprof/heap, etc.
		echopprof.Wrap(e)
	}

	// Start server
	go func() {
		if err := e.Start(":" + os.Getenv(`PORT`)); err != nil && !errors.Is(err, http.ErrServerClosed) {
			e.Logger.Fatal(err)
		}
	}()

	// Wait for interrupt signal to gracefully shut down the server with a timeout of 3 seconds.
	// Use a buffered channel to avoid missing signals as recommended for signal.Notify
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt)
	signal.Notify(stop, syscall.SIGTERM)

	// Recieve shutdown signals.
	<-stop

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}